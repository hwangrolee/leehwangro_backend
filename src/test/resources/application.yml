# -----------------------------------------------------------------
# 테스트 환경을 위한 설정 파일
# @ActiveProfiles("test") 또는 @DataJpaTest 실행 시 적용됩니다.
# -----------------------------------------------------------------

spring:
  config:
    activate:
      on-profile: test
  # H2 데이터베이스를 사용하도록 DataSource를 설정합니다.
  datasource:
    # 인메모리 DB인 H2를 사용하고, 데이터베이스 이름은 'testdb'로 지정합니다.
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    # MODE=MySQL: H2가 MySQL과 유사한 문법으로 동작하도록 설정 (호환성 향상)
    # DB_CLOSE_DELAY=-1: 모든 DB 연결이 닫혀도 메모리에서 DB가 사라지지 않도록 유지
    # url: jdbc:h2:mem:testdb;MODE=MySQL;DB_CLOSE_DELAY=-1 # MySQL 호환 모드를 사용하고 싶을 경우
    driver-class-name: org.h2.Driver
    username: sa  # H2 기본 사용자 이름
    password:     # H2 기본 비밀번호는 비어있음

  jpa:
    # 테스트가 끝나면 생성된 테이블 등의 스키마를 삭제합니다.
    defer-datasource-initialization: true
    hibernate:
      # 테스트 시작 시 스키마(테이블)를 생성하고, 테스트 종료 시 삭제합니다.
      ddl-auto: create-drop
    properties:
      hibernate:
        # 테스트 중 실행되는 SQL 쿼리를 콘솔에 보여줍니다 (디버깅에 유용).
        show_sql: true
        # SQL 쿼리를 보기 좋게 정렬합니다.
        format_sql: true
        # H2 데이터베이스 방언(Dialect)을 명시적으로 지정합니다.
        # Spring Boot 3.x부터는 자동 감지 기능이 뛰어나 굳이 설정하지 않아도 되는 경우가 많습니다.
        # database-platform: org.hibernate.dialect.H2Dialect

# 로그 레벨을 조정하여 JPA/Hibernate가 생성하는 SQL과 파라미터를 더 자세히 볼 수 있습니다.
logging:
  level:
    org.hibernate.SQL: DEBUG
    # 실행되는 SQL에 바인딩되는 파라미터 값을 로그로 확인하고 싶을 때 주석 해제
    # org.hibernate.orm.jdbc.bind: TRACE